<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>破茧者~BLOG</title>
  
  <subtitle>虚怀若谷，笃学不倦</subtitle>
  <link href="https://www.zqcblog.com/atom.xml" rel="self"/>
  
  <link href="https://www.zqcblog.com/"/>
  <updated>2025-09-14T04:51:54.000Z</updated>
  <id>https://www.zqcblog.com/</id>
  
  <author>
    <name>QianChen Zhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KMP详解</title>
    <link href="https://www.zqcblog.com/posts/428b39ea.html"/>
    <id>https://www.zqcblog.com/posts/428b39ea.html</id>
    <published>2025-09-14T02:52:41.000Z</published>
    <updated>2025-09-14T04:51:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KMP详解"><a href="#KMP详解" class="headerlink" title="KMP详解"></a>KMP详解</h1><ul><li>例题 <a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28.找出字符串中第一个匹配项的下标</a></li><li>题解 <a href="https://github.com/DocJlm/LeetCodeJava?tab=readme-ov-file">28.找出字符串中第一个匹配项的下标</a><br>这个算法第一次听说，假设你不是oi的话就是在数据结构课上，但是鉴于部分中国大学计算机系老师毋庸置疑的 “水” 平和令人发指的语言表达能力，大部分学生都是迷迷糊糊的，下面我对这个算法进行下详细讲解，希望对大家有所帮助。<h2 id="next数组"><a href="#next数组" class="headerlink" title="next数组"></a>next数组</h2>next数组是KMP算法核心，含义：所有p[1~j]的相等的前缀和后缀中长度的最大值<br>这里说明下细节，两个需要匹配的字符串数组下标建议从1开始因为后续j的值直接对应前j个字符，无需额外计算偏移量,比如模式串 p = “abcabx” 下标从1开始时，p[1]=’a’、p[2]=’b’…p[6]=’x’，next[5] 直接表示前5个字符abcab的最长匹配长度（值为 2），逻辑清晰。<br><img src="../img/KMP/KMP1.png" alt="图1"><br><img src="../img/KMP/KMP2.png" alt="图2"><br>如上图可以看出next数组的实际含义，第一个A没有匹配的0，第二个B同理，第三个A和第一个A匹配所以记位1，AB和前面的AB匹配长度位2所以记做2，C没有匹配的记做0，所以next[4] = 2。之后子串或者所谓模式串往后移动两个即可。<br>通过这个例子也可以看出KMP的优势就是，当匹配到不同字符的时候，由于已经知道前面匹配成功的字符信息，就可以利用信息避免暴力遍历方法中的回退操作。也就是上面指针步回退，那么算法的时间复杂度就是线性的了（从O(n*m)到O(n+m))!<h2 id="计算-next-数组"><a href="#计算-next-数组" class="headerlink" title="计算 next 数组"></a>计算 next 数组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 2, j = 0; i &lt;= m; i++) &#123;</span><br><span class="line">            while (j &gt; 0 &amp;&amp; p.charAt(i) != p.charAt(j + 1)) &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">            if (p.charAt(i) == p.charAt(j + 1)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>就按照上面的例子进行讲解说明：<br>数组 next 长度为 m + 1（m 是子串长度，这里 m = 5），所以 next 数组大小为 6。<br>循环变量 i 从 2 开始（因为子串第一个字符索引为 1，next[1] 固定为 0，从第二个字符，即索引 2 开始计算），j 初始化为 0。<br><strong>第一次循环（i = 2，计算 next[2]）</strong><br>比较 p.charAt(i)（i = 2，即子串中索引为 2 的字符 ‘B’）和 p.charAt(j + 1)（j = 0，所以是 p.charAt(1)，即字符 ‘A’）。<br>因为 ‘B’ != ‘A’，且 j = 0，不满足 j &gt; 0，所以 while 循环不执行。<br>由于 p.charAt(i) != p.charAt(j + 1)，j 保持 0，所以 next[2] = j = 0。<br><strong>第二次循环（i = 3，计算 next[3]）</strong><br>比较 p.charAt(3)（字符 ‘A’）和 p.charAt(1)（字符 ‘A’）。<br>因为 ‘A’ == ‘A’，所以 j++，此时 j = 1。<br>然后 next[3] = j = 1。<br><strong>第三次循环（i = 4，计算 next[4]）</strong><br>比较 p.charAt(4)（字符 ‘B’）和 p.charAt(2)（字符 ‘B’）。<br>因为 ‘B’ == ‘B’，所以 j++，此时 j = 2。<br>然后 next[4] = j = 2（这与图片里子串 next 数组中对应位置的值为 2 一致）。<br><strong>第四次循环（i = 5，计算 next[5]）</strong><br>比较 p.charAt(5)（字符 ‘C’）和 p.charAt(3)（字符 ‘A’）。<br>因为 ‘C’ != ‘A’，且 j = 2 &gt; 0，进入 while 循环，执行 j = next[j]，即 j = next[2] = 0。<br>再次比较 p.charAt(5)（’C’）和 p.charAt(1)（’A’），还是不相等，且 j = 0，while 循环结束。<br>由于 p.charAt(i) != p.charAt(j + 1)，j 保持 0，所以 next[5] = j = 0。<h2 id="在主串中匹配模式串"><a href="#在主串中匹配模式串" class="headerlink" title="在主串中匹配模式串"></a>在主串中匹配模式串</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 1, j = 0; i &lt;= n; i++) &#123;</span><br><span class="line">            while (j &gt; 0 &amp;&amp; s.charAt(i) != p.charAt(j + 1)) &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">            if (s.charAt(i) == p.charAt(j + 1)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            if (j == m) &#123;</span><br><span class="line">                return i - m;//i-m+1,但是从1开始所以要-1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><strong>第 1 次循环：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1. 检查不匹配时的回溯（j=0，不满足j&gt;0，while循环不执行）</span><br><span class="line">while (j &gt; 0 &amp;&amp; s.charAt(1) != p.charAt(j + 1)) &#123;</span><br><span class="line">    j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">// 2. 字符匹配判断：s[1]=&#x27;A&#x27; == p[1]=&#x27;A&#x27;（j+1=1），j自增为1</span><br><span class="line">if (s.charAt(1) == p.charAt(j + 1)) &#123;</span><br><span class="line">    j++; </span><br><span class="line">&#125;</span><br><span class="line">// 3. 检查是否完全匹配：j=1 != 7，不返回</span><br><span class="line">if (j == m) &#123;</span><br><span class="line">    return i - m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>第 2 次循环：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1. while循环：j=1&gt;0，但s[2]=&#x27;B&#x27; == p[2]=&#x27;B&#x27;（j+1=2），循环不执行</span><br><span class="line">while (j &gt; 0 &amp;&amp; s.charAt(2) != p.charAt(j + 1)) &#123;</span><br><span class="line">    j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">// 2. 字符匹配：s[2]=&#x27;B&#x27; == p[2]=&#x27;B&#x27;，j自增为2</span><br><span class="line">if (s.charAt(2) == p.charAt(j + 1)) &#123;</span><br><span class="line">    j++; </span><br><span class="line">&#125;</span><br><span class="line">// 3. 完全匹配检查：j=2 != 7，不返回</span><br><span class="line">if (j == m) &#123;</span><br><span class="line">    return i - m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>第 3 次循环：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1. while循环：j=2&gt;0，但s[3]=&#x27;A&#x27; == p[3]=&#x27;A&#x27;（j+1=3），循环不执行</span><br><span class="line">while (j &gt; 0 &amp;&amp; s.charAt(3) != p.charAt(j + 1)) &#123;</span><br><span class="line">    j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">// 2. 字符匹配：s[3]=&#x27;A&#x27; == p[3]=&#x27;A&#x27;，j自增为3</span><br><span class="line">if (s.charAt(3) == p.charAt(j + 1)) &#123;</span><br><span class="line">    j++; </span><br><span class="line">&#125;</span><br><span class="line">// 3. 完全匹配检查：j=3 != 7，不返回</span><br><span class="line">if (j == m) &#123;</span><br><span class="line">    return i - m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>第 4 次循环：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1. while循环：j=3&gt;0，但s[4]=&#x27;B&#x27; == p[4]=&#x27;B&#x27;（j+1=4），循环不执行</span><br><span class="line">while (j &gt; 0 &amp;&amp; s.charAt(4) != p.charAt(j + 1)) &#123;</span><br><span class="line">    j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">// 2. 字符匹配：s[4]=&#x27;B&#x27; == p[4]=&#x27;B&#x27;，j自增为4</span><br><span class="line">if (s.charAt(4) == p.charAt(j + 1)) &#123;</span><br><span class="line">    j++; </span><br><span class="line">&#125;</span><br><span class="line">// 3. 完全匹配检查：j=4 != 7，不返回</span><br><span class="line">if (j == m) &#123;</span><br><span class="line">    return i - m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>第 5 次循环：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1. while循环：j=4&gt;0，且s[5]=&#x27;A&#x27; != p[5]=&#x27;C&#x27;（j+1=5），执行回溯</span><br><span class="line">while (j &gt; 0 &amp;&amp; s.charAt(5) != p.charAt(j + 1)) &#123;</span><br><span class="line">    j = next[j]; // j = next[4] = 2（根据next数组取值）</span><br><span class="line">&#125;</span><br><span class="line">// 2. 回溯后判断：s[5]=&#x27;A&#x27; == p[3]=&#x27;A&#x27;（j+1=3），j自增为3</span><br><span class="line">if (s.charAt(5) == p.charAt(j + 1)) &#123;</span><br><span class="line">    j++; </span><br><span class="line">&#125;</span><br><span class="line">// 3. 完全匹配检查：j=3 != 7，不返回</span><br><span class="line">if (j == m) &#123;</span><br><span class="line">    return i - m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>第 6 次循环：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1. while循环：j=3&gt;0，但s[6]=&#x27;B&#x27; == p[4]=&#x27;B&#x27;（j+1=4），循环不执行</span><br><span class="line">while (j &gt; 0 &amp;&amp; s.charAt(6) != p.charAt(j + 1)) &#123;</span><br><span class="line">    j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">// 2. 字符匹配：s[6]=&#x27;B&#x27; == p[4]=&#x27;B&#x27;，j自增为4</span><br><span class="line">if (s.charAt(6) == p.charAt(j + 1)) &#123;</span><br><span class="line">    j++; </span><br><span class="line">&#125;</span><br><span class="line">// 3. 完全匹配检查：j=4 != 7，不返回</span><br><span class="line">if (j == m) &#123;</span><br><span class="line">    return i - m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>第 7 次循环：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1. while循环：j=4&gt;0，但s[7]=&#x27;C&#x27; == p[5]=&#x27;C&#x27;（j+1=5），循环不执行</span><br><span class="line">while (j &gt; 0 &amp;&amp; s.charAt(7) != p.charAt(j + 1)) &#123;</span><br><span class="line">    j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">// 2. 字符匹配：s[7]=&#x27;C&#x27; == p[5]=&#x27;C&#x27;，j自增为5</span><br><span class="line">if (s.charAt(7) == p.charAt(j + 1)) &#123;</span><br><span class="line">    j++; </span><br><span class="line">&#125;</span><br><span class="line">// 3. 完全匹配检查：j=5 != 7，不返回</span><br><span class="line">if (j == m) &#123;</span><br><span class="line">    return i - m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>第 8 次循环：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1. while循环：j=5&gt;0，但s[8]=&#x27;A&#x27; == p[6]=&#x27;A&#x27;（j+1=6），循环不执行</span><br><span class="line">while (j &gt; 0 &amp;&amp; s.charAt(8) != p.charAt(j + 1)) &#123;</span><br><span class="line">    j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">// 2. 字符匹配：s[8]=&#x27;A&#x27; == p[6]=&#x27;A&#x27;，j自增为6</span><br><span class="line">if (s.charAt(8) == p.charAt(j + 1)) &#123;</span><br><span class="line">    j++; </span><br><span class="line">&#125;</span><br><span class="line">// 3. 完全匹配检查：j=6 != 7，不返回</span><br><span class="line">if (j == m) &#123;</span><br><span class="line">    return i - m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>第 9 次循环：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1. while循环：j=6&gt;0，但s[9]=&#x27;B&#x27; == p[7]=&#x27;B&#x27;（j+1=7），循环不执行</span><br><span class="line">while (j &gt; 0 &amp;&amp; s.charAt(9) != p.charAt(j + 1)) &#123;</span><br><span class="line">    j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">// 2. 字符匹配：s[9]=&#x27;B&#x27; == p[7]=&#x27;B&#x27;，j自增为7</span><br><span class="line">if (s.charAt(9) == p.charAt(j + 1)) &#123;</span><br><span class="line">    j++; </span><br><span class="line">&#125;</span><br><span class="line">// 3. 完全匹配检查：j=7 == m=7，返回i - m = 9 - 7 = 2</span><br><span class="line">if (j == m) &#123;</span><br><span class="line">    return i - m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>最终结果：返回2（对应原主串”ABABABCABA”的起始下标，即从第 3 个字符开始匹配成功）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;KMP详解&quot;&gt;&lt;a href=&quot;#KMP详解&quot; class=&quot;headerlink&quot; title=&quot;KMP详解&quot;&gt;&lt;/a&gt;KMP详解&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;例题 &lt;a href=&quot;https://leetcode.cn/problems/find-the-in</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>李克勤院士</title>
    <link href="https://www.zqcblog.com/posts/956e041d.html"/>
    <id>https://www.zqcblog.com/posts/956e041d.html</id>
    <published>2025-06-27T06:49:56.000Z</published>
    <updated>2025-06-27T10:01:16.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="李克勤院士"><a href="#李克勤院士" class="headerlink" title="李克勤院士"></a>李克勤院士</h1><div class="tip home"><p>You get it,you get it;you don’t get it,you don’t get it.</p></div><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>特别感谢Java期末出题组老师把试卷结构改了只有一道大题，让我能21分钟交卷，特别感谢我亲爱的舍友赞助的自行车能让我光速从一教赶到信息楼，10点27分及时赶上讲座！</p><h2 id="How-to-Position-Yourself"><a href="#How-to-Position-Yourself" class="headerlink" title="How to Position Yourself"></a>How to Position Yourself</h2><p>关于怎样定位自己我觉着是极其重要的，作为计算机专业，研究方向其实也就固定的几类，按照李老师的分就是Theory,Algorithm,Middleware (theory-oriented),Middleware (system-oriented)。现在当下最火的毋庸置疑就是Algorithm里的dl。非常搞笑的现状就是人人都AIAI的叫，但基本没多少人懂其到底是啥，有同学读研更是盲目，在不清楚的前提下就入坑，所以建议考虑一下自身情况，万一自己更适合系统等方向呢？再没有Passion的情况下是很难做好一件事的。还有一类人也是非常搞笑的，就是有些想要考研的，其实很多人都对自己定位不清晰，自己到底适不适合考试都不知道，未来要干啥也不知道，就想在学校的温床里躺平，延缓就业，有些甚至二战三战，不多评价，祝好！</p><h2 id="Theory-System-No"><a href="#Theory-System-No" class="headerlink" title="Theory + System? No!"></a>Theory + System? No!</h2><p>既要又要=一无所获。你既要搞研究又要申请专利又要开公司又要抢占市场又要上市，一个人根本不可能做到这些的。这就不得不提大学里面大量水的一批的竞赛了，反正自己判断吧，对自己价值有多大都心里有数，打磨内核才是硬道理。</p><h2 id="How-to-Get-into-a-Research-Area"><a href="#How-to-Get-into-a-Research-Area" class="headerlink" title="How to Get into a Research Area"></a>How to Get into a Research Area</h2><h3 id="Read-extensively-but-selectively"><a href="#Read-extensively-but-selectively" class="headerlink" title="Read extensively but selectively"></a>Read extensively but selectively</h3><p>知道自己干啥别瞎干。</p><h3 id="Find-the-research-topic-by-yourself"><a href="#Find-the-research-topic-by-yourself" class="headerlink" title="Find the research topic by yourself"></a>Find the research topic by yourself</h3><p>这个其实就多少有点意思了，其实一般来说我们高校里的科研就是导师干什么你就干什么，很少有自己选题的。李老说他当时在美国读书的时候所有研究课题都是他自己选择的，哈哈。</p><h3 id="Choose-a-topic-of-your-favorite"><a href="#Choose-a-topic-of-your-favorite" class="headerlink" title="Choose a topic of your favorite"></a>Choose a topic of your favorite</h3><p>还是Passion的问题。</p><h3 id="Choose-a-topic-that-matches-your-experience-and-capabilities"><a href="#Choose-a-topic-that-matches-your-experience-and-capabilities" class="headerlink" title="Choose a topic that matches your experience and capabilities"></a>Choose a topic that matches your experience and capabilities</h3><p>还是自我定位</p><h3 id="Learn-the-background-knowledge-and-skills-only-when-necessary"><a href="#Learn-the-background-knowledge-and-skills-only-when-necessary" class="headerlink" title="Learn the background knowledge and skills only when necessary"></a>Learn the background knowledge and skills only when necessary</h3><p>必须得这样。</p><h3 id="Do-not-rely-on-your-supervisor"><a href="#Do-not-rely-on-your-supervisor" class="headerlink" title="Do not rely on your supervisor"></a>Do not rely on your supervisor</h3><p>青出于蓝而胜于蓝不是没有道理的。李老师说当年他美国的导师是助理教授，把他送走后就立马成了副教授，因此李老师帮导师评上了副教授，结果几十年过去了，李老师不断攀登，而他导师还是副教授。。。</p><h3 id="Do-not-switch-areas"><a href="#Do-not-switch-areas" class="headerlink" title="Do not switch areas"></a>Do not switch areas</h3><p>换来换去就完蛋了！</p><h2 id="How-to-Find-an-Original-Idea"><a href="#How-to-Find-an-Original-Idea" class="headerlink" title="How to Find an Original Idea"></a>How to Find an Original Idea</h2><p>怎么找创新点？</p><h3 id="Scientific-research-is-an-individual-and-creative-process"><a href="#Scientific-research-is-an-individual-and-creative-process" class="headerlink" title="Scientific research is an individual and creative process"></a>Scientific research is an individual and creative process</h3><p>科学研究是一个人发挥创造性的过程，这个我非常认同李老师的观点，李老师说他不理解为什么现在文章都是五六个作者甚至十几个作者，创新点不就是一个人想出来的吗还能是一人想n分之1吗。要是其他人说可信度还没那么高，但是李老师的确毋庸置疑，200多篇独立作者发布的文章，恐怖如斯。老师还自嘲说一千多篇剩下的八百多篇共同作者的都是腐败出来的，哈哈。其实有时候不是独立作者发布文章还会产生一些纠纷比如杨振宁李政道两位老先生的决裂。</p><h3 id="You-get-it-you-get-it-you-don’t-get-it-you-don’t-get-it"><a href="#You-get-it-you-get-it-you-don’t-get-it-you-don’t-get-it" class="headerlink" title="You get it, you get it; you don’t get it, you don’t get it"></a>You get it, you get it; you don’t get it, you don’t get it</h3><p>这个是李老师读博的时候和一个他钦慕的导师聊天时，李老师问怎么找创新点，这个学者给的回答，很哲学但也正确，有就有，没就没，就这么简单。</p><h3 id="You-should-not-rely-on-others"><a href="#You-should-not-rely-on-others" class="headerlink" title="You should not rely on others"></a>You should not rely on others</h3><p>不只学术上，方方面面如此，关键时刻谁都没你自己靠谱。</p><h3 id="There-is-no-standard-process"><a href="#There-is-no-standard-process" class="headerlink" title="There is no standard process"></a>There is no standard process</h3><p>路都是自己探索出来的，其实没必要畏缩，多试错才能有成长。</p><h3 id="There-is-no-shortcut"><a href="#There-is-no-shortcut" class="headerlink" title="There is no shortcut"></a>There is no shortcut</h3><p>脚踏实地。</p><h3 id="Every-paper-is-not-easy-to-publish"><a href="#Every-paper-is-not-easy-to-publish" class="headerlink" title="Every paper is not easy to publish"></a>Every paper is not easy to publish</h3><p>坚持。</p><h2 id="How-to-Make-Research-Deeper-and-Wider"><a href="#How-to-Make-Research-Deeper-and-Wider" class="headerlink" title="How to Make Research Deeper and Wider"></a>How to Make Research Deeper and Wider</h2><h3 id="You-must-think-deeply-and-uninterruptedly-with-concentration"><a href="#You-must-think-deeply-and-uninterruptedly-with-concentration" class="headerlink" title="You must think deeply and uninterruptedly with concentration"></a>You must think deeply and uninterruptedly with concentration</h3><p>专注。</p><h3 id="New-ideas-may-come-unexpectedly-but-not-surprisingly"><a href="#New-ideas-may-come-unexpectedly-but-not-surprisingly" class="headerlink" title="New ideas may come unexpectedly, but not surprisingly"></a>New ideas may come unexpectedly, but not surprisingly</h3><p>山重水复疑无路，柳暗花明又一村。</p><h3 id="The-first-idea-is-the-most-difficult-to-obtain"><a href="#The-first-idea-is-the-most-difficult-to-obtain" class="headerlink" title="The first idea is the most difficult to obtain"></a>The first idea is the most difficult to obtain</h3><p>万事开头难。</p><h3 id="Usually-more-and-deeper-ideas-will-come-when-you-write-a-paper"><a href="#Usually-more-and-deeper-ideas-will-come-when-you-write-a-paper" class="headerlink" title="Usually more and deeper ideas will come when you write a paper"></a>Usually more and deeper ideas will come when you write a paper</h3><p>递进。</p><h3 id="More-papers-more-ideas"><a href="#More-papers-more-ideas" class="headerlink" title="More papers, more ideas"></a>More papers, more ideas</h3><p>菜就多练。</p><h3 id="New-Problems-old-methods"><a href="#New-Problems-old-methods" class="headerlink" title="New Problems, old methods"></a>New Problems, old methods</h3><p>变与不变。</p><h3 id="New-research-areas-can-be-opened-more-easily-with-more-experience"><a href="#New-research-areas-can-be-opened-more-easily-with-more-experience" class="headerlink" title="New research areas can be opened more easily with more experience"></a>New research areas can be opened more easily with more experience</h3><p>其实也不一定要一味追求热门潮流，在自己领域深耕也是不错的选择。</p><h2 id="发表单作论文的条件"><a href="#发表单作论文的条件" class="headerlink" title="发表单作论文的条件"></a>发表单作论文的条件</h2><h3 id="能力-对资深学者是一个挑战"><a href="#能力-对资深学者是一个挑战" class="headerlink" title="能力(对资深学者是一个挑战)"></a>能力(对资深学者是一个挑战)</h3><p>因为有时候屁事一大堆，所以有些学者没法concentrate on。</p><h3 id="勇气-对青年学者是一个挑战"><a href="#勇气-对青年学者是一个挑战" class="headerlink" title="勇气(对青年学者是一个挑战)"></a>勇气(对青年学者是一个挑战)</h3><p>这挑战也是有点大。</p><h3 id="动力-梦想-目标-信念-追求-执着-激情"><a href="#动力-梦想-目标-信念-追求-执着-激情" class="headerlink" title="动力(梦想+目标+信念+追求+执着+激情)"></a>动力(梦想+目标+信念+追求+执着+激情)</h3><p>甭管能不能做到反正发表单作论文应该是每个学术研究者的ultimate goal!<br>Passion是李老师一直在强调的，干什么事没有激情都很难持续，更别提做好了。</p><h2 id="大师"><a href="#大师" class="headerlink" title="大师"></a>大师</h2><p>在36年间（1989-2025），共发表了1,130篇论文，年均31篇。在35年间（1989-2024），其中245篇论文为单独或第一作者，年均7篇。这里李老师举了个非常有意思的例子，就是我们甚至不用自己创新，找现成论文直接代码复现然后用latex敲出来一年能做到七篇吗？哈哈。真大师。</p><h2 id="Time-Management"><a href="#Time-Management" class="headerlink" title="Time Management"></a>Time Management</h2><ul><li><p><strong>Set long-, mid-, short-term plans and goals</strong>  </p></li><li><p><strong>Set milestones</strong>  </p></li><li><p><strong>Set priorities</strong>  </p></li></ul><p>就比如我要想准时来听李老师讲座我就必须在25分钟内写完Java考试卷，然后还要借辆自行车才能赶到，其实还少考虑了一个事情就是去的晚可能就没座位了。我还发现个可怕的事实，我上大学除了这次外我从来没干过时间规划。</p><h2 id="人生楷模"><a href="#人生楷模" class="headerlink" title="人生楷模"></a>人生楷模</h2><p>这两位是李老师的楷模那更是我们的楷模。</p><h3 id="董韫美院士"><a href="#董韫美院士" class="headerlink" title="董韫美院士"></a>董韫美院士</h3><p>董院士是李老师在中科所读研的导师，李老说当时只要一个人但是有九个人报考，后来李老师第一把他们干掉了哈哈。董老师也是单作论文作者值得敬佩。</p><h3 id="黄凯教授"><a href="#黄凯教授" class="headerlink" title="黄凯教授"></a>黄凯教授</h3><p>最让我印象深刻的是黄老师工作到80岁回国后还去港中文任教了五年，而且黄老师独立作者出了十几本书可谓“著作等身”。而且还紧跟潮流，出新东西就会立马学习钻研，终身学习。</p><h2 id="从一而终"><a href="#从一而终" class="headerlink" title="从一而终"></a>从一而终</h2><p>李老师其实这波讲座狗粮洒满，就不说了真是秀恩爱楷模。。。不管是对科研还是爱情李老师都是从一而终的，而且李老师和夫人在教育孩子上也是极其成功的，培养了三个“藤娃”！</p><h2 id="健康第一"><a href="#健康第一" class="headerlink" title="健康第一"></a>健康第一</h2><p>其实有个老掉牙的例子就是健康是1，其他都是0，1没了就全没了，所以健康真的很重要，反复鞭策。。。</p><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><p>我第一个问题就是当时的学习条件远不如现在优渥，当时您是怎么学习的？李老师的回答大概如下,Passion,有次甚至去IBM图书馆查了一天资料；第二个问题是您遇到最大的困难是什么，怎么克服的？这个李老师没有想好，回头告诉我；第三个问题是正常情况下您的一天安排是什么？这个多少涉及隐私了，但是李老师还是进行了回答，老师说一般会睡到自然醒（不熬夜），然后早上起来一般会先回复微信消息（合作的一千多人吧），比如学生的问题、论文的问题，还会直接打语音进行解答。然后就是保持高效率。</p><h2 id="Passion"><a href="#Passion" class="headerlink" title="Passion"></a>Passion</h2><p>李老师说他虽然62岁了(其实根本看不出来，声如洪钟，快两个小时的讲座全程Passion,还留着和我一样走在时尚最前沿的寸头)，但他心里认为自己至多18岁。讲真，我虽然没过十八多久但早已没年少时的锐气和Passion了，惭愧之至，希望哪天Passion之火能重燃。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>总之这是我有史以来听过最有价值的讲座，李老师幽默风趣，实力超群实为吾辈楷模！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;李克勤院士&quot;&gt;&lt;a href=&quot;#李克勤院士&quot; class=&quot;headerlink&quot; title=&quot;李克勤院士&quot;&gt;&lt;/a&gt;李克勤院士&lt;/h1&gt;&lt;div class=&quot;tip home&quot;&gt;&lt;p&gt;You get it,you get it;you don’t get </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>碎梦后繁星</title>
    <link href="https://www.zqcblog.com/posts/af5d4fac.html"/>
    <id>https://www.zqcblog.com/posts/af5d4fac.html</id>
    <published>2025-05-31T07:33:59.000Z</published>
    <updated>2025-05-31T16:15:00.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="碎梦后繁星"><a href="#碎梦后繁星" class="headerlink" title="碎梦后繁星"></a>碎梦后繁星</h1> <div class="note primary simple"><p>primary   ——The only thing you have to fear is fear itself</p></div>                           <h2 id="迷茫"><a href="#迷茫" class="headerlink" title="迷茫"></a>迷茫</h2><p>  作为大学生，不管什么专业初入大学时或多或少都会迷茫，总结一下无不归结于一个原因，对未来不确定性的恐惧。</p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>  你为什么要读研？上大学以来这句话让我印象最深，我自诩“能言善辩，巧舌如簧”，再加上我本身正直善良，所以很少有一些非知识性问题能让我沉默，但是当问出这句话的时候我沉默了，我找不出来能够自恰的答案，大一的时候我是电信专业，在电信实验室程序组的日子里不说专业知识编程能力的提高，最重要的是思想的升华，非常感谢w学长的启迪，我从清澈愚昧的大一新生蜕变成了现在的我。其实现在我还是不太好回答这个问题，首先，社会潮流所向，从研究生博士生扩招就可以看出大家都有相应需求；第二，大家普遍认为研究生毕业会有更好的工作进而有着较高的生活水平；第三，似乎大家都有名校情结，C9上清北，985上C9,211上985，双非上211；第四，你能遇见更优秀的人，甚至可以找到人生伴侣等等吧。听起来确实不错。</p><h2 id="转专业"><a href="#转专业" class="headerlink" title="转专业"></a>转专业</h2><p>为什么要转专业，核心原因是我不想上一堆实验课还有两大天书电磁场和信号系统，转计算机纯纯想轻松点。。。</p><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>绝大部分大学生对工作是抵触的，在大学，你可以领着父母给的低保吃喝不愁，回家还能享受亲戚邻里的大学生荣耀头衔的夸赞，周末都能放假，寒暑假甚至多于小学生，再者只要你愿意你甚至可以天天放假。其实这都不是本质原因，可能更核心的大学生不愿意面对找工作这个事实的是心里对美好月薪过万生活的向往和现实月薪5000的牛马生活的矛盾，简而言之就是高不成低不就，其实找工作大学生还是很好找的，只要你不挑剔。其实说实话我是幸运的，因为我要高考成绩高点我就会去读数学专业了，为什么？当时的认知就是数学物理，有点好笑。所以有时候真的，塞翁失马，焉知非福！大家一定要有一个乐观的心态。再说下工资问题，可能除了部分计算机专业的同学本科毕业外，其他专业大概很难本科就能拿上万的薪水，所以要是其他专业的同学，也许也只有读研这一条出路了吧。</p><h3 id="就业压力大"><a href="#就业压力大" class="headerlink" title="就业压力大"></a>就业压力大</h3><p>现在大家可能都会听说过这样一句话，工作难找。我再次声明我单纯从计算机专业本科生角度来阐明一下这个问题是有多么荒唐可笑。举一个例子，一个人是高富帅，学历还好，他能做我的老婆吗？显然不行！为什么呢？因为老婆的首要条件是女性。同理，找工作也是这样啊，首要条件就是你满足公司招聘需求。那怎么看你是否满足呢，打开boss直聘或者牛客看下招聘要求，对于开发岗来说几乎清一色要求本科及以上学历，需要掌握某某某某，显然就目前情况来说，前者显然满足甚至条件还有点优越毕竟双一流，后者就分人了大部分是不合格的。然后可以大概搜一下牛客的面经看下面试问题，我想绝大部分会和我感受一样，嘛也不会，随便举个例子，大家都学过数据库吧，那我问MySQL中的MVCC是什么，不是说你不知道而是你不能很好的深入的解释出来，其实大部分可能还真不知道。那么问题就来了，如果一个985硕士去面试问的问题要么一知半解要么完全不会，换位思考作为老板你会要吗？而且研究生搞得大多是深度学习，和开发区别还是蛮大的，所以其实要求本科及以上学历的原因也就很明显了吧，其实有时候，年龄也是一个巨大的优势。一个很显然的事实就摆在面前你不合适有的是人合适，所以这就是为什么很多计算机专业本科生甚至研究生就不了业的原因（其实计算机专业进互联网行业的比例我觉着92可能平均下来可能也不到40%），是大家普遍渲染的学历焦虑吗，不是，而应该是能力欠缺。其实有趣的一点是真正适合不断深造的人能力往往能力是极强的，不管升学还是就业总会游刃有余，不会存在一般人的焦虑的，可惜大部分人选择深造是无厘头的跟风式的毫无自知之明的，问原因，学历焦虑。</p><h3 id="学历贬值"><a href="#学历贬值" class="headerlink" title="学历贬值"></a>学历贬值</h3><p>现在因为扩招所以学历贬值这个词非常流行，对于其他专业我不予置评，了解的不深入没有亲身经历时是不具备评判资格的，不过可笑的是，这一点绝大部分人都做不到，一知半解就口无遮拦，极其可笑愚昧。但是作为计算机专业我可以很负责的告诉你这四个字就是扯淡，一个很显然的事实各大厂top计划算法岗年薪百万，应届。其实作为计算机专业本科生进大厂几乎就是一些冷门专业博士毕业的价格，甚至更高，但是也不是每一个本科生都能进大厂，哈哈哈，所以说我是幸运的要不就去学数学了，可能大抵会比较崩溃，不过其实就我亲身经历而言我其实建议想搞深度学习的其实本硕都可以读数学，因为计算机自学资源太多了，而且难度老少皆宜，数学就不一样了，没有环境可能很难学下去，其实深度学习对数学要求还是蛮高的所以往往数学系的转计算机博大抵是可以乱杀科班子弟的。其实还有一个值得思考的问题，假如你选择开发，那么你大学所谓的高等数学线性代数概率统计是没有任何用处的，更别提大学物理这种和计算机风马牛不相及的科目了，如果你想深造搞算法这些也没用，因为浅尝辄止远远不够用。所以其实大学有些课程啊满足等式，上课=坐牢=浪费时间。</p><h3 id="35岁危机"><a href="#35岁危机" class="headerlink" title="35岁危机"></a>35岁危机</h3><p>现在网上比较热门的还有一个话题，“程序员的35岁危机”，很多懂哥懂姐又要开始输出了，还是别学计算机了，行业饱和了还有裁员风险，赶紧考公考编吧，铁饭碗多稳定啊。然后就开始同情被裁员的大厂程序员，年纪轻轻就失业，好悲惨。讲真，我也不知道该同情谁，你说人家没了工作，人家可能已经在北上深买房了，或者拿着攒下来的几百个w采菊东篱下悠然见南山，或者换个大厂继续卷了，而你，可能退休前也没这数，所以有时候真没必要同情别人。其实裁员很正常，我觉者分两种第一种只会增删改查写屎山的程序员，不把你优化了那些优秀的年轻人怎么进来；第二种，可能因为业务变动整个组或部门都没了，我管你优秀与否呢。显然前者失业就真失业了，后者选择权在自己。（其实有个规划找份稳定工作也挺好的）</p><h2 id="责任"><a href="#责任" class="headerlink" title="责任"></a>责任</h2><p>大学带给我最大的蜕变就是成长，但是现实确实挺悲惨的，绝大部分大学生不是选择承担，而是选择逃避。逃避就业上文已经有过阐述我就不再重复，其实大部分选择深造的也是一种逃避，因为不想就业或者没有能力就业就要选择深造，甚至未来到底要干嘛都一知半解，那么我这有几个问题，选择深造的大部分可能都给不出答案，第一，你是否适合科研或者了解过科研，其实很多科研佼佼者或者大厂top计划候选人是有着不俗的Noi和Acm成绩的，但是也有很多代码能力强的并不适合科研，所以我觉着强代码能力是科研的必要不充分条件。第二，沉没成本你能承担的起吗，这个就有两方面了，其一，科研有时候要看运气，如果你的想法和另外的一个人的重复了，早了一切顺利，晚一步所有努力付之一炬，这还是在顺利的情况下，如果不顺利，其中的艰辛可能只有本专业的能体会吧；其二，你的家庭情况，我在两个电信班和一个计科班呆过，每年贫困认证都是40%以上，所以其实有时候你的选择不一定取决于你，你还要多为父母家人考虑，更需要结合自身情况审慎定夺。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>鲁迅先生说过，“中国的青年应该有志气，要有自己的独立思想。”其实现在也许是家庭或学校教育确实存在一些问题，尤其是家庭教育，好多家长总是喜欢强迫孩子干这干那，导致很多人学傻了，失去了自己的个性，埋没了兴趣爱好和天赋，没有自己的思考和思想，人云亦云；他还强调，“青年最要紧的是勇于探索，不怕吃苦。”技术在不断更迭变化，我们恰好是计算机专业，与时代同频共振，所以要与时俱进，勇于探索新知识和新领域，不怕面对困难和挑战；并且，他进一步指出，“青年人要做一个有用的人，不要只做一个看热闹的人。”我们绝非旧时代的残党，而是要开创新时代的人，我们要勇敢追求自己的理想，并为社会做出贡献。即使是点点星光，最终也会汇聚成辉煌的光芒，只要我们年轻一代心怀梦想，不断拼搏，祖国将在我们的建设下崛起，我们的生活也会越来越美好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;碎梦后繁星&quot;&gt;&lt;a href=&quot;#碎梦后繁星&quot; class=&quot;headerlink&quot; title=&quot;碎梦后繁星&quot;&gt;&lt;/a&gt;碎梦后繁星&lt;/h1&gt; &lt;div class=&quot;note primary simple&quot;&gt;&lt;p&gt;primary   ——The only thi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.zqcblog.com/posts/4a17b156.html"/>
    <id>https://www.zqcblog.com/posts/4a17b156.html</id>
    <published>2025-05-29T12:14:59.869Z</published>
    <updated>2025-05-29T12:44:45.331Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
